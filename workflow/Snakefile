from snakemake.io import glob_wildcards
import glob
import os

# Checking files

files_found = glob.glob("/mnt/data3/alba_cph/resources/reads/*.fastq.gz")
print("Files found:", files_found)

# Extracting the samples

lanes = glob_wildcards("/mnt/data3/alba_cph/resources/reads/{sample}_L{lane}_R{read}_001.fastq.gz")
samples = set(lanes.sample)  # Removing duplicates

# Checking if we found samples

if not samples:
    raise ValueError("Samples not found. Please, check the paths and file names")

print("Samples extracted:", samples)


rule all:
    input:
        expand("/mnt/data3/alba_cph/results/03_no_human/{sample}_no_human.1.gz", sample=samples),
        expand("/mnt/data3/alba_cph/results/03_no_human/{sample}_no_human.2.gz", sample=samples),
        expand("/mnt/data3/alba_cph/results/03_no_human/{sample}_human.sam", sample=samples),
        expand("/mnt/data3/alba_cph/results/03_no_human/{sample}_bowtie.log", sample=samples) 

## Concatenating the different lanes
rule concat_r1:
    input:
        l1_1="/mnt/data3/alba_cph/resources/reads/{sample}_L001_R1_001.fastq.gz",
        l2_1="/mnt/data3/alba_cph/resources/reads/{sample}_L002_R1_001.fastq.gz",
        l3_1="/mnt/data3/alba_cph/resources/reads/{sample}_L003_R1_001.fastq.gz",
        l4_1="/mnt/data3/alba_cph/resources/reads/{sample}_L004_R1_001.fastq.gz"
    output:
        "/mnt/data3/alba_cph/results/01_concat/{sample}_R1_concat.fastq.gz"
    resources:
        mem_mb=8192,
        runtime=lambda wildcards, attempt: 60 * (2 ** (attempt - 1))
    threads: 2
    shell:
        """
        cat {input.l1_1} {input.l2_1} {input.l3_1} {input.l4_1} > {output}
        """

rule concat_r2:
    input:
        l1_2="/mnt/data3/alba_cph/resources/reads/{sample}_L001_R2_001.fastq.gz",
        l2_2="/mnt/data3/alba_cph/resources/reads/{sample}_L002_R2_001.fastq.gz",
        l3_2="/mnt/data3/alba_cph/resources/reads/{sample}_L003_R2_001.fastq.gz",
        l4_2="/mnt/data3/alba_cph/resources/reads/{sample}_L004_R2_001.fastq.gz"
    output:
        "/mnt/data3/alba_cph/results/01_concat/{sample}_R2_concat.fastq.gz"
    resources:
        mem_mb=8192,
        runtime=lambda wildcards, attempt: 60 * (2 ** (attempt - 1))  # Doubling time with each attempt
    threads: 2
    shell:
        """
        cat {input.l1_2} {input.l2_2} {input.l3_2} {input.l4_2} > {output}
        """

## Removinig RNA-seq adapters and bad quality sequences with Fastp


rule fastp_qc:
    input:
        r1="/mnt/data3/alba_cph/results/01_concat/{sample}_R1_concat.fastq.gz",
        r2="/mnt/data3/alba_cph/results/01_concat/{sample}_R2_concat.fastq.gz"
    output:
        r1_trimmed="/mnt/data3/alba_cph/results/02_fastp/{sample}_R1_trimmed.fastq.gz",
        r2_trimmed="/mnt/data3/alba_cph/results/02_fastp/{sample}_R2_trimmed.fastq.gz",
        html="/mnt/data3/alba_cph/results/02_fastp/{sample}_fastp.html",
        json="/mnt/data3/alba_cph/results/02_fastp/{sample}_fastp.json"
    params:
        fastp_log="/mnt/data3/alba_cph/results/02_fastp/{sample}_fastp.log"
    conda:
        "environments/fastp.yml"
    resources:
        mem_mb=8192,
        runtime=lambda wildcards, attempt: 60 * (2 ** (attempt - 1))  # Doubling time with each attempt
    threads: 2
    shell:
        """
        /data/genotools/fastp \
            --in1 {input.r1} --in2 {input.r2} \
            --out1 {output.r1_trimmed} --out2 {output.r2_trimmed} \
            --trim_poly_g \
            --trim_poly_x \
            --low_complexity_filter \
            --n_base_limit 5 \
            --qualified_quality_phred 20 \
            --length_required 60 \
            --html {output.html} \
            --json {output.json} \
            --adapter_sequence AGATCGGAAGAGCACACGTCTGAACTCCAGTCA \
            --adapter_sequence_r2 AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT
        """

## Indexing the human reference genome with Bowtie2


BOWTIE_DIR = "/data/resources/refgenome/ncbi_grch38" # Change this directory <-----------------------------------

rule build_bowtie_index:
    input:
        fna = f"{BOWTIE_DIR}/GCA_000001405.15_GRCh38_no_alt_analysis_set.fna" #Change the reference if needed --
    output:
        expand("/mnt/data3/alba_cph/resources/references/GCA_000001405.15_GRCh38_no_alt_analysis_set.{ext}", 
               ext=["1.bt2", "2.bt2", "3.bt2", "4.bt2", "rev.1.bt2", "rev.2.bt2"])
    conda:
        "environments/mapping.yml"
    resources:
        mem_mb=8192,
        runtime=lambda wildcards, attempt: 60 * (2 ** (attempt - 1))  # Doubling time with each attempt
    threads: 2
    shell:
        """
        bowtie2-build {input.fna} /mnt/data3/alba_cph/resources/references/GCA_000001405.15_GRCh38_no_alt_analysis_set
        """

## Removing the host RNA with Bowtie2


rule remove_human_rna:
    input:
        bt2_index = expand("/mnt/data3/alba_cph/resources/references/GCA_000001405.15_GRCh38_no_alt_analysis_set.{ext}", 
                           ext=["1.bt2", "2.bt2", "3.bt2", "4.bt2", "rev.1.bt2", "rev.2.bt2"]),
        r1_trimmed = "/mnt/data3/alba_cph/results/02_fastp/{sample}_R1_trimmed.fastq.gz",
        r2_trimmed = "/mnt/data3/alba_cph/results/02_fastp/{sample}_R2_trimmed.fastq.gz"
    output:
        no_human1 = "/mnt/data3/alba_cph/results/03_no_human/{sample}_no_human.1.gz",  # Not aligned sequences (non-human sequences R1)
        no_human2 = "/mnt/data3/alba_cph/results/03_no_human/{sample}_no_human.2.gz",  # Not aligned sequences (non-human sequences R2)
        human = "/mnt/data3/alba_cph/results/03_no_human/{sample}_human.sam",
        bowtie_log = "/mnt/data3/alba_cph/results/03_no_human/{sample}_bowtie.log"
    params:
        output_filename = "/mnt/data3/alba_cph/results/03_no_human/{sample}_no_human.gz"
    conda:
        "environments/mapping.yml"
    shell:
        """
        bowtie2 -x "/mnt/data3/alba_cph/resources/references/GCA_000001405.15_GRCh38_no_alt_analysis_set" \
        -1 {input.r1_trimmed} -2 {input.r2_trimmed} \
        --threads {threads} --un-conc-gz {params.output_filename} -S {output.human} \
        2> {output.bowtie_log}
        """

#Next step: remove files (.sam) that aligned to the human reference genome