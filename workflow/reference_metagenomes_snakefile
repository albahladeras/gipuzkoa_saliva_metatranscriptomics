import os
from snakemake.io import expand, glob_wildcards, directory

# Data paths
METAGENOME_REF_DIR    = "/mnt/data3/alba_cph/resources/references/GTDB"
QCED_READS = "/mnt/data3/alba_cph/results/05_no_rrna"

#Temporary paths
TMP_DIR     = "/mnt/data3/alba_cph/results/06_create_reference_genome/tmp"

#Results paths
RESULTS_DIR = "/mnt/data3/alba_cph/results/06_create_reference_genome"

# Capture samples from the NO rRNA fastqs
lanes   = glob_wildcards(os.path.join(QCED_READS, "{sample}_no_rrna_{R}.fastq.gz"))
samples = set(lanes.sample)

# Unique reference genomes (without the -zip extension)
GENOMES = [
    line.strip().replace(".zip", "")
    for line in open(os.path.join(METAGENOME_REF_DIR, "unique_reference_species.txt"))
]

#Remember create the tmp directory if it does not exist in the GTDB folder
rule all:
    input:
        # Concatenated genome and annotations
        os.path.join(RESULTS_DIR, "all_genomes.fna"),
        os.path.join(RESULTS_DIR, "all_genomes.gff"),
        os.path.join(RESULTS_DIR, "all_genomes.faa"),
        os.path.join(RESULTS_DIR, "all_genomes.ffn"),
        # Bowtie2 index files
        expand(os.path.join(RESULTS_DIR, "all_genomes.{ext}"),
               ext=["1.bt2", "2.bt2", "3.bt2", "4.bt2", "rev.1.bt2", "rev.2.bt2"]),
        # Alignments and indices per sample
        expand(os.path.join(RESULTS_DIR, "{sample}_mapped.bam"), sample=samples),
        expand(os.path.join(RESULTS_DIR, "{sample}_mapped.bam.bai"), sample=samples),
        # Gene coverage per sample
        expand(os.path.join(RESULTS_DIR, "{sample}_covered_genes.bed"), sample=samples)

rule unzip:
    input:
        zip_file=lambda wc: os.path.join(METAGENOME_REF_DIR, f"{wc.genome}.zip")
    output:
        directory(os.path.join(TMP_DIR, "{genome}"))
    shell:
        """
        mkdir -p {output} \
        && unzip -q {input.zip_file} -d {output}
        """

rule concatenate_fna:
    input:
        dirs=expand(os.path.join(TMP_DIR, "{genome}"), genome=GENOMES)
    output:
        os.path.join(RESULTS_DIR, "all_genomes.fna")
    shell:
        """
        find {TMP_DIR} -name "*.fna" | sort | xargs cat > {output}
        """

rule build_bowtie_index:
    input:
        fna= os.path.join(RESULTS_DIR, "all_genomes.fna")
    output:
        expand(os.path.join(RESULTS_DIR, "all_genomes.{ext}"),
               ext=["1.bt2", "2.bt2", "3.bt2", "4.bt2", "rev.1.bt2", "rev.2.bt2"])
    conda:
        "environments/mapping.yml"
    resources:
        mem_mb=8192,
        runtime=lambda wildcards, attempt: 60 * (2 ** (attempt - 1))
    threads: 8
    shell:
        """
        bowtie2-build {input.fna} {RESULTS_DIR}/all_genomes
        """

rule annotate_concatenated_with_prodigal:
    input:
        fna=os.path.join(RESULTS_DIR, "all_genomes.fna")
    output:
        gff=os.path.join(RESULTS_DIR, "all_genomes.gff"),
        faa=os.path.join(RESULTS_DIR, "all_genomes.faa"),
        ffn=os.path.join(RESULTS_DIR, "all_genomes.ffn")
    conda:
        "environments/prodigal.yml"
    shell:
        """
        prodigal -i {input.fna} \
                 -o {output.gff} \
                 -a {output.faa} \
                 -d {output.ffn} \
                 -f gff \
                 -p meta
        """

rule mapping:
    input:
        # Todos los archivos de Ã­ndice de bowtie2
        bt2_index=expand(os.path.join(RESULTS_DIR, "all_genomes.{ext}"),
                         ext=["1.bt2", "2.bt2", "3.bt2", "4.bt2", "rev.1.bt2", "rev.2.bt2"]),
        r1=os.path.join(QCED_READS, "{sample}_no_rrna_1.fastq.gz"),
        r2=os.path.join(QCED_READS, "{sample}_no_rrna_2.fastq.gz")
    output:
        bam=os.path.join(RESULTS_DIR, "{sample}_mapped.bam"),
        bai=os.path.join(RESULTS_DIR, "{sample}_mapped.bam.bai"),
        log=os.path.join(RESULTS_DIR, "{sample}_bowtie.log")
    conda:
        "environments/mapping.yml"
    threads: 8
    shell:
        """
        bowtie2 -x {RESULTS_DIR}/all_genomes \
                -1 {input.r1} -2 {input.r2} \
                --threads {threads} \
                2> {output.log} | \
        samtools view -bS - | \
        samtools sort -o {output.bam}

        samtools index {output.bam}
        """

rule extract_gene_coverage:
    input:
        gff=os.path.join(RESULTS_DIR, "all_genomes.gff"),
        bam=os.path.join(RESULTS_DIR, "{sample}_mapped.bam")
    output:
        os.path.join(RESULTS_DIR, "{sample}_covered_genes.bed")
    conda:
        "environments/bedtools.yml"
    shell:
        """
        # Extract lines with "CDS" in the gff file and convert to BED format
        awk '$3 == "CDS"' {input.gff} | \
        awk 'BEGIN{{OFS="\\t"}} {{print $1, $4-1, $5, ".", ".", $7}}' > {wildcards.sample}_genes.bed

        # Use bed tools to intersect
        bedtools intersect -a {wildcards.sample}_genes.bed -b {input.bam} -bed > {output}

        # Clen temporary files
        rm {wildcards.sample}_genes.bed
        """
